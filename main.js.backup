const path = require('path');
const readJson = require('firost/readJson');
const writeJson = require('firost/writeJson');
const run = require('firost/run');
const read = require('firost/read');
const write = require('firost/write');
const copy = require('firost/copy');
const remove = require('firost/remove');
const isDirectory = require('firost/isDirectory');
const move = require('firost/move');
const _ = require('golgoth/lodash');
const dedent = require('golgoth/dedent');

module.exports = {

  // Fixes after install
  async postInstallDocs() {
    // Fill the meta
    const libPackage = await readJson(this.rootPath('lib/package.json'));
    const { description, name, homepage } = libPackage;
    const siteData = {
      description: description || '',
      title: name,
      productionUrl: homepage,
      twitter: 'pixelastic',
    };
    const dataPath = this.rootPath('docs/src/_data/meta.json');
    await writeJson(siteData, dataPath);

    const themeConfig = {
      navigation: [
        {
          name: 'Overview',
          links: [
            {
              title: 'Getting Started',
              href: 'gettingStarted',
            },
          ],
        },
        {
          name: 'API',
          links: ['init', 'read', 'write'],
        },
      ],
    };
    // TODO: Also add the docSearch part
    const themeConfigPath = this.rootPath('docs/src/_data/theme.json');
    await writeJson(themeConfig, themeConfigPath);

    // Define the theme
    const norskaConfig = dedent`
    const theme = require('norska-theme-docs');

    module.exports = {
      theme,
    }`;
    await write(norskaConfig, this.rootPath('docs/norska.config.js'));

    // Configure readme.
    // We move the current Readme to docs/src/index.md
    // We delete the main readme and ./lib readme, they will be regenerated on commit
    const hostReadmePath = this.rootPath('README.md');
    const readmeContent = _.chain(await read(hostReadmePath))
      .replace(`# ${name}`, '')
      .value();
    const indexContent = dedent`
    ---
    title: ${name}
    ---

    <div class="lead">${description}</div>

    ${readmeContent}`;
    await write(indexContent, this.rootPath('docs/src/index.md'));
    await remove(this.rootPath('docs/src/index.pug'));

    // Regenerate host reamde
    await remove(this.rootPath('README.md'));
    await remove(this.rootPath('lib/README.md'));
    await run('yarn aberlaas readme');
  },

  // Helper functions
  cache: {},
  get(key) {
    return _.get(this.cache, key);
  },
  set(key, value) {
    _.set(this.cache, key, value);
  },
  has(key) {
    return _.has(this.cache, key);
  },
  rootPath(relativePath = '') {
    return path.resolve(this.get('rootPath'), relativePath);
  },
  pathRoot(relativePath = '') {
    // just because I keep confusing the method name
    return this.rootPath(relativePath);
  },
  async initialPackage() {
    const filepath = path.resolve(this.rootPath('package.json'));
    if (!this.has('initialPackage')) {
      this.set('initialPackage', await readJson(filepath));
    }
    return this.get('initialPackage');
  },
  templatePath(relativePath = '') {
    return path.resolve(__dirname, 'templates', relativePath);
  },
  async getTemplate(relativePath = '') {
    return await readJson(this.templatePath(relativePath));
  },
};
